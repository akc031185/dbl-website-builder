import { NextRequest, NextResponse } from 'next/server'

const GITHUB_API_BASE = 'https://api.github.com'

export async function POST(request: NextRequest) {
  let body: any = {}
  try {
    body = await request.json()
    const { operation, ...params } = body

    const githubToken = process.env.GITHUB_TOKEN
    const githubOwner = process.env.GITHUB_OWNER

    if (!githubToken) {
      throw new Error('GITHUB_TOKEN environment variable is required')
    }

    if (!githubOwner) {
      throw new Error('GITHUB_OWNER environment variable is required')
    }

    const headers = {
      'Authorization': `token ${githubToken}`,
      'Accept': 'application/vnd.github.v3+json',
      'Content-Type': 'application/json'
    }

    let result

    switch (operation) {
      case 'create-repository':
        result = await createRepository(params, headers, githubOwner)
        break

      case 'create-file':
        result = await createFile(params, headers, githubOwner)
        break

      case 'update-file':
        result = await updateFile(params, headers, githubOwner)
        break

      case 'get-repository':
        result = await getRepository(params, headers, githubOwner)
        break

      case 'list-repositories':
        result = await listRepositories(headers, githubOwner)
        break

      default:
        throw new Error(`Unknown GitHub operation: ${operation}`)
    }

    return NextResponse.json({
      success: true,
      operation,
      data: result,
      timestamp: new Date().toISOString()
    })

  } catch (error) {
    console.error('GitHub operations error:', error)
    
    return NextResponse.json({
      success: false,
      operation: body?.operation || 'unknown',
      error: error instanceof Error ? error.message : 'Unknown GitHub error'
    }, { status: 400 })
  }
}

async function createRepository(params: any, headers: any, owner: string) {
  const { name, description = 'Generated by DBL Website Builder', isPrivate = true, templateRepo } = params

  if (!name) {
    throw new Error('Repository name is required')
  }

  let url = `${GITHUB_API_BASE}/repos/${owner}/${templateRepo}/generate`
  let body = {
    owner,
    name,
    description,
    private: isPrivate
  }

  // If no template repo specified, create a regular repo
  if (!templateRepo) {
    url = `${GITHUB_API_BASE}/user/repos`
  }

  const response = await fetch(url, {
    method: 'POST',
    headers,
    body: JSON.stringify(body)
  })

  if (!response.ok) {
    const error = await response.json()
    throw new Error(`GitHub API error: ${error.message || response.statusText}`)
  }

  return await response.json()
}

async function createFile(params: any, headers: any, owner: string) {
  const { repo, path, content, message = 'Add file via DBL Website Builder' } = params

  if (!repo || !path || !content) {
    throw new Error('repo, path, and content are required for file creation')
  }

  // Base64 encode the content
  const encodedContent = Buffer.from(JSON.stringify(content, null, 2)).toString('base64')

  const response = await fetch(`${GITHUB_API_BASE}/repos/${owner}/${repo}/contents/${path}`, {
    method: 'PUT',
    headers,
    body: JSON.stringify({
      message,
      content: encodedContent,
      branch: 'main'
    })
  })

  if (!response.ok) {
    const error = await response.json()
    throw new Error(`GitHub API error: ${error.message || response.statusText}`)
  }

  return await response.json()
}

async function updateFile(params: any, headers: any, owner: string) {
  const { repo, path, content, message = 'Update file via DBL Website Builder' } = params

  if (!repo || !path || !content) {
    throw new Error('repo, path, and content are required for file update')
  }

  // First get the current file to get its SHA
  const getCurrentFile = await fetch(`${GITHUB_API_BASE}/repos/${owner}/${repo}/contents/${path}`, {
    method: 'GET',
    headers
  })

  let sha
  if (getCurrentFile.ok) {
    const currentFile = await getCurrentFile.json()
    sha = currentFile.sha
  }

  // Base64 encode the content
  const encodedContent = Buffer.from(JSON.stringify(content, null, 2)).toString('base64')

  const body: any = {
    message,
    content: encodedContent,
    branch: 'main'
  }

  if (sha) {
    body.sha = sha
  }

  const response = await fetch(`${GITHUB_API_BASE}/repos/${owner}/${repo}/contents/${path}`, {
    method: 'PUT',
    headers,
    body: JSON.stringify(body)
  })

  if (!response.ok) {
    const error = await response.json()
    throw new Error(`GitHub API error: ${error.message || response.statusText}`)
  }

  return await response.json()
}

async function getRepository(params: any, headers: any, owner: string) {
  const { repo } = params

  if (!repo) {
    throw new Error('Repository name is required')
  }

  const response = await fetch(`${GITHUB_API_BASE}/repos/${owner}/${repo}`, {
    method: 'GET',
    headers
  })

  if (!response.ok) {
    const error = await response.json()
    throw new Error(`GitHub API error: ${error.message || response.statusText}`)
  }

  return await response.json()
}

async function listRepositories(headers: any, owner: string) {
  const response = await fetch(`${GITHUB_API_BASE}/users/${owner}/repos?sort=created&direction=desc&per_page=20`, {
    method: 'GET',
    headers
  })

  if (!response.ok) {
    const error = await response.json()
    throw new Error(`GitHub API error: ${error.message || response.statusText}`)
  }

  return await response.json()
}